{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","important","active","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","sort","b","toLowerCase","done","activeTasks","map","components_Task","key","doneTasks","fontSize","App","counter","deleteTask","Array","from","changeTaskStatus","Object","toConsumableArray","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3afbe885.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: '',\r\n    checked: false,\r\n    date: this.minDate,\r\n  }\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    })\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: '',\r\n          checked: false,\r\n          date: this.minDate,\r\n        })\r\n      }\r\n    } else {\r\n      alert('za krótka nazwa');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate += '-12-31';\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <input type=\"text\" placeholder=\"dodaj zadanie...\" value={this.state.text} onChange={this.handleText} />\r\n        <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n        <label htmlFor=\"important\">Priorytet</label>\r\n        <br />\r\n        <label htmlFor=\"date\">Do kiedy zrobić </label>\r\n        <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: 'red',\r\n  }\r\n  const { id, text, date, important, active, finishDate } = props.task\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong> - do <em>(zrobić do - {date})</em>\r\n          <br />\r\n          - potwierdzenie wykonania <span> {finish}</span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter(task => task.active);\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      if (a.text.toLowerCase() < b.text.toLowerCase())\r\n        return -1;\r\n      if (a.text.toLowerCase() > b.text.toLowerCase())\r\n        return 1;\r\n      return 0;\r\n    })\r\n  }\r\n\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate > b.finishDate)\r\n        return -1;\r\n      if (a.finishDate < b.finishDate)\r\n        return 1;\r\n      return 0;\r\n    })\r\n  }\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>brak zadań, ale jesteś szczęśliwym człowiekiem!</p>}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"done\">\r\n        <h3>Zadania zrobione <em>({doneTasks.length})</em></h3>\r\n        {doneTasks.length > 5 && <span style={{ fontSize: 10, color: 'red' }}>Wyświetlonych jest jedynie 5 ostatnich zadań</span>}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AddTask from './AddTask';\r\nimport TaskList from './TaskList';\r\n\r\nclass App extends Component {\r\n  counter = 9;\r\n  state = {\r\n    tasks: [\r\n      { id: 0, text: 'zagrać wreszcie w Wiedźmina 3', date: '2019-02-15', important: true, active: true, finishDate: null },\r\n      { id: 1, text: 'zrobić dobry uczynek', date: '2020-11-12', important: false, active: true, finishDate: null },\r\n      { id: 2, text: 'pomalować dom po sylwestrze', date: '2019-09-11', important: false, active: true, finishDate: null },\r\n      { id: 3, text: 'schudnąć 30 kilogramów', date: '2019-05-20', important: true, active: true, finishDate: null },\r\n      { id: 4, text: 'sprzedać butelki po piwie (20 skrzynek)', date: '2020-11-12', important: false, active: true, finishDate: null },\r\n      { id: 5, text: 'jeszcze raz pomalować dom', date: '2019-09-11', important: false, active: true, finishDate: null },\r\n      { id: 6, text: 'fryzjer!!!', date: '2019-05-20', important: true, active: true, finishDate: null },\r\n      { id: 7, text: 'nie odbierać poleconego od komornika', date: '2020-11-12', important: false, active: true, finishDate: null },\r\n      { id: 8, text: 'kupić 2 butelki litrowe', date: '2019-09-11', important: false, active: true, finishDate: null }\r\n    ]\r\n  }\r\n\r\n  deleteTask = (id) => {\r\n    let tasks = Array.from(this.state.tasks);\r\n    tasks = tasks.filter(task => task.id !== id);\r\n\r\n    this.setState({\r\n      tasks\r\n    })\r\n  }\r\n\r\n  changeTaskStatus = (id) => {\r\n    let tasks = [...this.state.tasks];\r\n    tasks.forEach(task => {\r\n      if (task.id === id) {\r\n        task.active = false;\r\n        task.finishDate = new Date().getTime();\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      tasks,\r\n    })\r\n  }\r\n\r\n  addTask = (text, date, important) => {\r\n    const task = {\r\n      id: this.counter,\r\n      text,\r\n      date,\r\n      important,\r\n      active: true,\r\n      finishDate: null\r\n    }\r\n    this.counter++;\r\n\r\n    this.setState(prevState => ({\r\n      tasks: [...prevState.tasks, task],\r\n    }));\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>MY NEW TODO APP</h1>\r\n        <AddTask add={this.addTask} />\r\n        <hr />\r\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}